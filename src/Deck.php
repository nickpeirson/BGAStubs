<?php
/**
 * @filesource
 */
namespace NickPeirson\BGAStub;

use UnexpectedValueException;

/**
 * The BGA Studio Deck component
 *
 * Using the deck component, you will be able to use the following features without writing a single SQL database request:
 *  - Place cards in a pile, shuffle cards, draw cards one by one or many at a time.
 *  - "Auto-reshuffle" the discard pile into the deck when the deck is empty.
 *  - Move cards between different locations: hands of players, the table, etc.
 *
 * The deck contains cards which have the following structure:
 *
 *     [
 *        'id' => 50,           // The id of the card, generated by the Deck component
 *        'type' => 2,          // A string representing the card type, e.g. suits may be represented
 *                              // by the numbers 1 through 4
 *        'type_arg' => ..,     // An integer representing the card type argument, e.g. the value of
 *                              // the card may be represented by the numbers 1 through 13 for Ace through to King
 *        'location' => 'deck', // A string representing a location, or pile, of cards
 *        'location_arg' => 3   // An integer represeting a sub-location in the location. This can be used for the card
 *                              // position, e.g. in a deck, or for splitting a location, e.g. creating a hand per
 *                              // player in the 'hand' location
 *     ];
 *
 * **Auto-reshuffling:**
 *
 * To enable auto-reshuffle you must set `$deck->autoreshuffle` to `true` during the setup of the component.
 *
 * With auto-reshuffle enabled, if the `deck` location is empty when you try to retrieve a card from it, the `discard`
 * location will automatically be reshuffled into the `deck` location.
 *
 * If you need to notify players when the deck is shuffled, you can assign a callback method to
 * `$cards->autoreshuffle_trigger`, e.g. `$cards->autoreshuffle_trigger = [$this, 'deckAutoReshuffle'];`.
 *
 * You can override the locations that auto-reshuffle uses by setting `$cards->autoreshuffle_custom`, e.g.
 * `$cards->autoreshuffle_custom = ['deck' => 'discard'];`, replacing 'deck' and 'discard' with your custom locations.
 *
 */
interface Deck {
    /**
     * Initialize the Deck component.
     *
     * Usually, init is called in your game constructor.
     * Must be called before any other Deck method.
     *
     * Example usage:
     *
     *     $this->cards = self::getNew( "module.common.deck" );
     *     $this->cards->init( "card" );
     *
     * @param string $table_name Name of the DB table used by this Deck component
     */
    public function init(string $table_name);

    /**
     * Create card items in your deck component.
     *
     * Usually, all card items are created once, during the setup phase of the game.
     * During the `createCards` process, Deck generates unique IDs for all card items.
     *
     * `createCards` is optimized to create a lot of cards at once. Do not use it to create cards one by one.
     *
     * By default, if `location` and `location_arg` arguments are not set, newly created cards are placed in the `deck`
     * location. If `location` (and optionally location_arg) is specified, cards are created for this specific
     * location.
     *
     * @param array $cards  An array describing all cards that need to be created:
     * <code>
     * $cards = [
     *     [ 'type' => 1, 'type_arg' => 99, 'nbr' => 1 ],
     *     [ 'type' => 2, 'type_arg' => 12, 'nbr' => 4 ],
     *     ...
     * ];
     * </code>
     * @param string $location The location to create cards in. By default this will be the `deck`.
     * @param int $location_arg The position in the pile to insert the card at. If not specified
     * `$location_arg` will be set to 0, indicating the top of the pile.
     */
    public function createCards(array $cards, string $location = 'deck', $location_arg = null);

    /**
     * Pick a card from a location/pile (ex: 'deck') and place it in the 'hand' of specified player.
     *
     * Return the card picked or `null` if there are no more card in given location.
     *
     * This method supports auto-reshuffle (see "auto-reshuffle" below).
     *
     * @param string $location
     * @param $player_id
     * @return array|null
     */
    public function pickCard($location, $player_id): ?array;

    /**
     * Return an array with the cards picked
     *
     * Returns up to a maximum of `$nbr`, or `null` if there are no more cards in given location.
     *
     * This method supports auto-reshuffle (see "auto-reshuffle" below). In case there are not enough
     * cards in the pile, all remaining cards are picked first, then the auto-reshuffle is triggered,
     * then the other cards are picked.
     *
     * @param int $nbr The number of cards to return. If there are not enough cards in the location,
     * less cards may be returned.
     * @param string $location The location to pick cards from.
     * @param $player_id
     * @return array|null
     */
    public function pickCards($nbr, $location, $player_id): ?array;

    /**
     * Pick a card for any location.
     *
     * Similar to `pickCard`, but not limited to `hand` locations.
     *
     * This method supports auto-reshuffle (see "auto-reshuffle" below).
     *
     * @param string $from_location The "pile" style location from where you are picking a card.
     * @param string $to_location The location where you will place the card picked.
     * @param int $location_arg The position in the pile to insert the card at. If not specified
     * `$location_arg` will be set to 0, indicating the top of the pile.
     * @return array|null
     */
    public function pickCardForLocation(string $from_location, string $to_location, $location_arg=0): ?array;

    /**
     * Pick cards for any location.
     *
     * Similar to `pickCards`, but not limited to `hand` locations.
     *
     * This method supports auto-reshuffle (see "auto-reshuffle" below).
     *
     * @param int $nbr The number of cards to return. If there are not enough cards in the location,
     * less cards may be returned.
     * @param string $from_location The "pile" style location from where you are picking a card.
     * @param string $to_location The location where you will place the card picked.
     * @param int $location_arg The position in the pile to insert the card at. If not specified
     * `$location_arg` will be set to 0, indicating the top of the pile.
     * @param bool $no_deck_reform If set to "true", the auto-reshuffle feature is disabled during
     * this method call.
     * @return array|null
     */
    public function pickCardsForLocation(
        int $nbr,
        string $from_location,
        string $to_location,
        $location_arg = 0,
        bool $no_deck_reform = false
    ): ?array;

    /**
     * Move the specific card to given location.
     *
     * @param int $card_id ID of the card to move.
     * @param string $location Location to move the card to.
     * @param int $location_arg The position in the pile to insert the card at. If not specified
     * `$location_arg` will be set to 0, indicating the top of the pile.
     * @return mixed
     */
    public function moveCard(int $card_id, string $location, int $location_arg = 0);

    /**
     * Move the specific cards to given location.
     *
     * @param array $cards An array of IDs of cards to move.
     * @param string $location Location to move the card to.
     * @param int $location_arg The position in the pile to insert the card at. If not specified
     * `$location_arg` will be set to 0, indicating the top of the pile.
     * @return mixed
     */
    public function moveCards(array $cards, string $location, int $location_arg = 0);

    /**
     * Move a card to a specific "pile" location at a given position specified by `$location_arg`.
     *
     * If there is already a card in the position specified by `$location_arg`, increment all cards
     * after `$location_arg` in order to insert new card at this position.
     *
     * To specifically place a card on the top or bottom of a pile, use `insertCardOnExtremePosition` instead.
     *
     * @param int $card_id ID of the card to move.
     * @param string $location Location to insert the card into.
     * @param int $location_arg The position in the pile to insert the card at.
     * @return mixed
     */
    public function insertCard(int $card_id, string $location, int $location_arg);

    /**
     * Move a card onto the top or bottom of a pile
     *
     * @param int $card_id The id of the card to move
     * @param string $location The location to move the card to
     * @param bool $bOnTop
     * @return mixed
     */
    public function insertCardOnExtremePosition(int $card_id, string $location, bool $bOnTop);

    /**
     * Move all cards from one location to another
     *
     * If you want to move the cards and keep their current order, you should use {@see Deck::moveAllCardsInLocationKeepOrder() moveAllCardsInLocationKeepOrder()}
     *
     * @param string $from_location Where to move the cards from
     * @param string $to_location Where to move the cards to
     * @param int|null $from_location_arg If specified, only cards at the position given by `$from_location_arg`
     * are moved
     * @param int $to_location_arg If specified, the moved cards are added to the location at this position.
     * Otherwise the cards are moved to the top of the `$to_location`
     * @return mixed
     */
    public function moveAllCardsInLocation(
        string $from_location,
        string $to_location,
        ?int $from_location_arg = null,
        int $to_location_arg = 0
    );

    /**
     * Move all cards from one location to another, maintaining their order
     *
     * @param string $from_location
     * @param string $to_location
     * @return mixed
     */
    public function moveAllCardsInLocationKeepOrder(string $from_location, string $to_location);

    /**
     * Play the specified card, moving it to the discard pile
     *
     * This is a helper method for `insertCardOnExtremePosition($card_id, "discard", true)`
     *
     * @param int $card_id
     * @return mixed
     */
    public function playCard(int $card_id);

    /**
     * Get an array containing the information about a specific card
     *
     * Returns null if the card isn't found
     *
     * @param int $card_id
     * @return array|null
     */
    public function getCard(int $card_id): ?array;

    /**
     * Get an array of card detail arrays for the specified card ids
     *
     * @throws \UnexpectedValueException Throws an `Unexpected` exception if either:
     *  - Not all the cards are found, or
     *  - Card ids are specified multiple times
     * @param array[int] $cards_array An array of card ids
     * @return array
     */
    public function getCards(array $cards_array): array;

    /**
     * Get all cards in specific location
     *
     * Returns an array of card detail arrays for the specified location
     *
     * @param string $location The location to get the cards for
     * @param int|null $location_arg If specified, only the cards at this position will be returned
     * @param string|null $order_by If specified, the cards will be returned ordered by this database field
     * @return array
     */
    public function getCardsInLocation(string $location, ?int $location_arg = null, ?string $order_by = null): array;

    /**
     * Count how many cards are in the specified location
     *
     * @param string $location The location you want to count the cards in
     * @param int|null $location_arg If specified, only the cards at this position will be counted
     * @return int
     */
    public function countCardInLocation(string $location, ?int $location_arg=null): int;

    /**
     * Return the number of cards in each location of the game.
     *
     * The method returns an associative array with the format `location => number of cards`.
     *
     * Example return:
     *
     *     [
     *         'deck' => 12,
     *         'hand' => 21,
     *         'discard' => 54,
     *         'ontable' => 3
     *     ];
     *
     * @return array
     */
    public function countCardsInLocations(): array;

    /**
     * Return the number of cards in each "location_arg" for the given location.
     *
     * The method returns an associative array with the format `location_arg => number of cards`.
     *
     * Example: count the number of cards in each player's hand:
     *
     *     $this->countCardsByLocationArgs('hand');
     *     // Result:
     *     [
     *         122345 => 5,    // player 122345 has 5 cards in hand
     *         123456 => 4     // and player 123456 has 4 cards in hand
     *     ];
     *
     * @param string $location
     * @return array
     */
    public function countCardsByLocationArgs(string $location ): array;

    /**
     * Get all cards in the specified player's hand.
     *
     * This is an alias for {@see Deck::getCardsInLocation() `Deck::getCardsInLocation('hand', $player_id)`}
     *
     * @param int $player_id
     * @return array
     */
    public function getPlayerHand(int $player_id ): array;

    /**
     * Get the top card from a location
     *
     * Returns an array containing the card information, or null if the location is empty.
     * This method will not cause the location to be auto-reshuffled if there are no more cards in the location.
     *
     * @param string $location
     * @return array|null
     */
    public function getCardOnTop(string $location): ?array;

    /**
     * Return the specified number of cards from a location/pile
     *
     * This method will not cause the location to be auto-reshuffled if there are no more cards in the location.
     *
     * @param int $nbr
     * @param string $location
     * @return array An array with at most `$nbr` elements, or an empty array if there are no
     * cards in this location
     */
    public function getCardsOnTop(int $nbr, string $location): array;

    /**
     * Gets the position of a card at the top or bottom of the given location
     *
     * This method works only on a "pile" location, i.e. where you are using `location_arg` to specify the
     * position of each card (ex: `deck` location).
     *
     * @param bool $bGetMax `true` to return the location of the top card, `false` for the bottom card
     * @param string $location
     * @return mixed
     */
    public function getExtremePosition(bool $bGetMax , string $location);

    /**
     * Get all cards of a specific type
     *
     * @param string $type The type of the cards to return
     * @param int|null $type_arg If specified, only return cards of this `$type_arg`
     * @return array An array of card details, or an empty array if no cards of the type were found
     */
    public function getCardsOfType(string $type, ?int $type_arg = null): array;

    /**
     * Get all of a type of card from a location
     *
     * @param string $type The type of the cards to return
     * @param int|null $type_arg If specified, only return cards of this `$type_arg`
     * @param string $location
     * @param string|null $location_arg
     * @return array An array of card details, or an empty array if no cards of the type were found
     */
    public function getCardsOfTypeInLocation(string $type, ?int $type_arg = null, string $location, string $location_arg = null): array;

    /**
     * Shuffle the cards in a location
     *
     * Shuffle only works on locations where cards are on a "pile" (ex: `deck`). After calling shuffle,
     * `$location_arg` will be updated for all of the cards in the location.
     *
     * @param string $location
     * @return mixed
     */
    public function shuffle(string $location);
}
